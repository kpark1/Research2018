#!/usr/bin/env python
import sys
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mlp
import ScopeTrace
from scipy.optimize import curve_fit

#---------------------------------------------------------------------------------------------------
# M A I N
#---------------------------------------------------------------------------------------------------
# initial settings
mlp.rcParams['axes.linewidth'] = 2

for filename in sys.argv[1:]:
    print ' File to open: ' + filename
    with open(filename,"r") as file:
        data = file.read()

# decode the scope trace
trace = ScopeTrace.ScopeTrace(data,1)

# find baseline and jitter
baseline,jitter = trace.find_baseline_and_jitter(0,250)
#print ' Baseline: %10.6f,  Jitter: %10.6f'%(baseline,jitter)

inverted_yvalues = []
for value in trace.yvalues:
    inverted_yvalue = -(value-baseline)
    inverted_yvalues.append(inverted_yvalue)
x= trace.xvalues
y = inverted_yvalues 

n= len(x)

#sigmas = range(.00001, .01, 5)
sigma = .002
mean = sum(y)/n

#gaussian function
def gaus(x, a, x0, sigma):
    return a*np.exp(-(x-x0)**2/(2*sigma**2))
#popt
#for sigma in sigmas:

popt, pcov = curve_fit(gaus, x,y, p0=[1, mean,sigma] )


print(popt)
y2= gaus(x, *popt)
plt. plot(x,y, 'r', label = 'data')
plt.plot(x, y2, 'b', label = 'fit')
plt. legend()
plt.show()
