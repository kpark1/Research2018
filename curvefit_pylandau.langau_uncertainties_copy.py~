#!/usr/bin/env python
import sys
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mlp
import ScopeTrace
from scipy.optimize import curve_fit
import pylandau
import sets
#---------------------------------------------------------------------------------------------------
# M A I N
#---------------------------------------------------------------------------------------------------
# initial settings
mlp.rcParams['axes.linewidth'] = 2

for filename in sys.argv[1:]:
    print ' File to open: ' + filename
    with open(filename,"r") as file:
        data = file.read()
# decode the scope trace
trace = ScopeTrace.ScopeTrace(data,1)

# find baseline and jitter 
#when baseline is the mean y values when x <= 250 and jitter is a mean of sum( (y-baseline)**2)
baseline,jitter = trace.find_baseline_and_jitter(0,250)
#print ' Baseline: %10.6f,  Jitter: %10.6f'%(baseline,jitter)

inverted_yvalues = []
for value in trace.yvalues:
    inverted_yvalue = -(value-baseline)
    inverted_yvalues.append(inverted_yvalue)
#x= np.arange(0,100,0.1)
x = trace.xvalues[0:800] 
x = np.array(x)
y = inverted_yvalues[0:800] 

#curvefit for LANDAU
mpv, eta, A = 330, 35, 30
coeff, pcov = curve_fit(pylandau.landau, x, y, p0= (mpv, eta, A), sigma= np.array([float(jitter)]*len(x)))
print("Landau parameters are: "+ str(coeff))
y3 = pylandau.landau(x, *coeff)
plt.plot(x, y3,'b',label = 'landau')
plt.plot(x, y, 'k', label = 'data')

#curvefit for Gaussian
mean = sum(inverted_yvalues)/len(trace.xvalues)
popt_all = []
y_all= []
for sigma in np.linspace(-100,100 ,1000):
    def gaus(x, a, x0, sigma):
        return a*np.exp(-(x-x0)**2/(2*sigma**2))
    popt, pcov = curve_fit(gaus, x,y, p0=[1,mean,sigma] )
    popt_all.append(np.ndarray.tolist(popt))
#popt_unique = []  
popt_unique = [list(q) for q in popt_all]    
y_stored  =[]
param_final = []
for i in range(len(popt_unique)):
    #if popt_all[i] != any(popt_unique): 
       # popt_unique.append(popt_all[i][0:])
    y_value = gaus(x, *popt_unique[i])
    y_stored.append(y_value)
    if max(y_value)> jitter*10000 and len(param_final) == 0:
        plt.plot(x, y_value, label = 'gaussian'+ str(i))
        param_final.extend(popt_unique[i])
        second_parameter = [popt_all[i][0], popt_all[i][1], -float( popt_all[i][2])]
        print('Working Gaussian parameters are: '+ str(popt_all[i]) +'and' + str(second_parameter))

#Curvefit for Langau
mpv2 = 300
eta2  = 20
A2 = 20
sigma = 10
coeff2, pcov = curve_fit(pylandau.langau, x, y, p0= (mpv2, eta2,sigma, A2))
print("Langau parameters are: "+ str(coeff2))
y4 = pylandau.langau(x, *coeff2)
plt.plot(x, y4,'y',label = 'langau')
plt.legend(loc = 'upper left')
plt.show()

