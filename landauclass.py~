import numpy as np
import os

class ScopeTrace:
    def __init__(self, data):
        #self.data = data
        self.data= data
        self.xvalues = []
        self.yvalues = []
        self.vertical_offset = self.find_value('Vertical Offset', data)
        self.n_average = n_average
        i = 0
        for line in data.split('/n'):
            f= line.split(',')
            if len(f) <5:
                continue
            x= float(i)
            y= self.vertical_offset +float(f[i])
            self.xvalues.append(x)
            self.yvalues.append(y)
            i += 1
#baseline is a mean value and jitter is a variance
      def baseline_and_jitter(self, xmin, trigger.offset):
          yvalues_baseline = self.yvalues[xmin+1:trigger.offset-1]
          baseline = sum(y_values_jitter)/len(y_values_jitter)
          jitter = sum([y_j **2 for y_j in y_values_jitter]) -baseline**2
          return (baseline, jitter)
              
       def inverted_plot_fit_param(self, fit_param = None, xmin, trigger.offset):
           baseline, jitter = self.find_baseline_and_jitter(xmin, int(trigger.offset))
           inverted_yvalues = []
           for value in self.yvalues:
               inverted_yvalue = -(value- baseline)
               inverted_yvalues.append(inverted_yvalue)
           plt.plot(x, y, label = 'Data')
           if fit_parm != None and len(fit_param) ==3:
               plt.plot(x, pylandau.landau(x, *fit_param), label ='Landau Fit') 
                                                           


