#!/usr/bin/env python
import sys
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mlp
import ScopeTrace
from scipy.optimize import curve_fit

import pylandau

#---------------------------------------------------------------------------------------------------
# M A I N
#---------------------------------------------------------------------------------------------------
# initial settings
mlp.rcParams['axes.linewidth'] = 2

for filename in sys.argv[1:]:
    print ' File to open: ' + filename
    with open(filename,"r") as file:
        data = file.read()

# decode the scope trace
trace = ScopeTrace.ScopeTrace(data,1)

# find baseline and jitter
baseline,jitter = trace.find_baseline_and_jitter(0,250)
#print ' Baseline: %10.6f,  Jitter: %10.6f'%(baseline,jitter)

inverted_yvalues = []
for value in trace.yvalues:
    inverted_yvalue = -(value-baseline)
    inverted_yvalues.append(inverted_yvalue)
x= trace.xvalues
y = inverted_yvalues
#i = 0
#k = len(y)
#k = len(trace.xvalues)/4
#x_1= trace.xvalues[i:k]
#y_1 = inverted_yvalues[i:k]

n= len(x)
#sigmas = range(.00001, .01, 5)
sigma = .002
mean = sum(y)/n
#gaussian function
A, eta, mpv = (1,1,10)
plt.plot(x, pylandau.landau(x, mpv, eta, A))
plt.show()
plt.plot(x, np.array([ pylandau.get_landau(x_value, mpv, eta, A) for x_value in x])
plt.show()
